### YamlMime:Tutorial
title: Erste Schritte bei der Cloudentwicklung mit den Azure-Bibliotheken für Python
metadata:
  title: Erste Schritte mit Azure-Bibliotheken für Python
  description: Hier finden Sie Informationen zu Azure-Cloudressourcen und erfahren, wie Sie sie verbinden und in Ihren Python-Anwendungen nutzen.
  audience: Developer
  level: Beginner
  nextTutorialHref: /python/api/overview/azure/?view=azure-python
  nextTutorialTitle: Referenz zum Python SDK
  displayType: two-column
  interactive: azurecli
  ms.date: 10/18/2019
  ms.openlocfilehash: 6f2e30a365ea27d62cc5b32b621d78ddc35bb367
  ms.sourcegitcommit: 858b061ed9ac883821a0485054b8076e2e719821
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 04/28/2020
  ms.locfileid: "82209813"
items:
- durationInMinutes: 1
  content: "In diesem Leitfaden wird die Verwendung verschiedener Bibliotheken im Azure SDK für Python veranschaulicht.  \n"
- title: Voraussetzungen
  durationInMinutes: 5
  content: >
    - Ein Azure-Konto. Falls Sie noch kein Konto haben, können Sie eine [kostenlose Testversion](https://azure.microsoft.com/free/) verwenden.

    - [Der neueste Python 3.x-Interpreter.](https://www.python.org/downloads/)

    - Die [Azure CLI](/cli/azure/install-azure-cli) (lokale Verwendung) oder die [Azure Cloud Shell](/azure/cloud-shell/quickstart) (exklusive Verwendung der Cloud).
- title: Einrichten der Authentifizierung
  durationInMinutes: 5
  content: >
    Das SDK kann mithilfe Ihres aktiven CLI-Abonnements einen Client erstellen. Für die Produktion muss aber [MSAL](https://github.com/AzureAD/microsoft-authentication-library-for-python) oder Ihr eigenes System für Anmeldeinformationen verwendet werden.


    Verwenden Sie zum Definieren der aktiven Anmeldeinformationen [az login](/cli/azure/authenticate-azure-cli).

    Bei der standardmäßigen Abonnement-ID handelt es sich um die ID, die Sie bereits besitzen. Alternativ können Sie die ID mit [az account](/cli/azure/manage-azure-subscriptions-azure-cli) festlegen.


    ```python

    from azure.common.client_factory import get_client_from_cli_profile

    from azure.mgmt.compute import ComputeManagementClient


    client = get_client_from_cli_profile(ComputeManagementClient)

    ```
- title: Erstellen einer virtuellen Umgebung
  durationInMinutes: 5
  content: >
    Bei einer virtuellen Umgebung befinden sich die SDK-Bibliotheken an einem isolierten Ort für Ihr Projekt. Dadurch kann das SDK bei Bedarf durch Löschen des Umgebungsordners problemlos deinstalliert werden.


    Erstellen einer virtuellen Umgebung in Bash (Linux oder [Bash für Windows](https://msdn.microsoft.com/commandline/wsl/about)):

    ```bash

    pip install virtualenv

    virtualenv mytestenv

    cd mytestenv

    source ./bin/activate

    ```


    Erstellen einer virtuellen Umgebung in PowerShell:

    ```powershell

    pip install virtualenv

    virtualenv mytestenv

    cd mytestenv

    .\Scripts\activate

    ```
- title: Erstellen einer virtuellen Linux-Maschine
  durationInMinutes: 5
  content: >
    Dieser Code erstellt einen neuen virtuellen Linux-Computer namens `testLinuxVM` in der Ressourcengruppe `sampleVmResourceGroup` in der Azure-Region „USA, Osten“.


    Authentifizieren:

    ```azurecli

    az login

    ```

    Erstellen Sie eine Ressourcengruppe:

    ```azurecli

    az group create -l eastus --n sampleVmResourceGroup

    ```


    Erstellen eines virtuellen Netzwerks und des Subnetzes:

    ```azurecli

    az network vnet create -g sampleVmResourceGroup -n azure-sample-vnet --address-prefix 10.0.0.0/16 --subnet-name azure-sample-subnet --subnet-prefix 10.0.0.0/24

    ```


    Erstellen einer öffentlichen IP-Adresse:

    ```azurecli

    az network public-ip create -g sampleVmResourceGroup -n azure-sample-ip --allocation-method Dynamic --version IPv4

    ```

    Erstellen eines Netzwerkschnittstellenclients:

    ```azurecli

    az network nic create -g sampleVmResourceGroup --vnet-name azure-sample-vnet --subnet azure-sample-subnet -n azure-sample-nic --public-ip-address azure-sample-ip

    ```


    ```python

    from azure.mgmt.network import NetworkManagementClient

    from azure.mgmt.compute import ComputeManagementClient

    from azure.common.client_factory import get_client_from_cli_profile


    # Azure Datacenter

    LOCATION = 'eastus'


    # Resource Group

    GROUP_NAME = 'sampleVmResourceGroup'


    # Network

    VNET_NAME = 'azure-sample-vnet'

    SUBNET_NAME = 'azure-sample-subnet'


    # VM

    NIC_NAME = 'azure-sample-nic'

    VM_NAME = 'testLinuxVM'


    USERNAME = 'userlogin'

    PASSWORD = 'Pa$$w0rd91'


    IP_ADDRESS_NAME='azure-sample-ip'


    VM_REFERENCE = {
        'linux': {
            'publisher': 'Canonical',
            'offer': 'UbuntuServer',
            'sku': '16.04.0-LTS',
            'version': 'latest'
        },
        'windows': {
            'publisher': 'MicrosoftWindowsServerEssentials',
            'offer': 'WindowsServerEssentials',
            'sku': 'WindowsServerEssentials',
            'version': 'latest'
        }
    }



    def run_example():

        compute_client = get_client_from_cli_profile(ComputeManagementClient)
        network_client = get_client_from_cli_profile(NetworkManagementClient)

        # get nic id
        nic = network_client.network_interfaces.get(GROUP_NAME, NIC_NAME)

        # Create Linux VM
        print('\nCreating Linux Virtual Machine')
        vm_parameters = create_vm_parameters(nic.id, VM_REFERENCE['linux'])
        print(vm_parameters)
        async_vm_creation = compute_client.virtual_machines.create_or_update(
            GROUP_NAME, VM_NAME, vm_parameters)
        async_vm_creation.wait()


    def create_vm_parameters(nic_id, vm_reference):
        """Create the VM parameters structure.
        """
        return {
            'location': LOCATION,
            'os_profile': {
                'computer_name': VM_NAME,
                'admin_username': USERNAME,
                'admin_password': PASSWORD
            },
            'hardware_profile': {
                'vm_size': 'Standard_DS1_v2'
            },
            'storage_profile': {
                'image_reference': {
                    'publisher': vm_reference['publisher'],
                    'offer': vm_reference['offer'],
                    'sku': vm_reference['sku'],
                    'version': vm_reference['version']
                },
            },
            'network_profile': {
                'network_interfaces': [{
                    'id': nic_id,
                }]
            },
        }


    if __name__ == "__main__":
        run_example()
    ```


    Überprüfen Sie den virtuellen Computer unter Ihrem Abonnement nach Abschluss des Programms mit der Azure CLI:


    ```azurecli

    az vm list --resource-group sampleVmResourceGroup

    ```


    Nachdem Sie sich vergewissert haben, dass der Code erfolgreich ausgeführt wurde, löschen Sie den virtuellen Computer und dessen Ressourcen über die Befehlszeile.


    ```azurecli

    az group delete --name sampleVmResourceGroup

    ```
- title: Bereitstellen einer Web-App aus einem GitHub-Repository
  durationInMinutes: 5
  content: "Dieser Code stellt eine Flask-Webanwendung aus der Verzweigung `master` in einem öffentlichen GitHub-Repository für eine neue [Azure App Service-Web-App](https://docs.microsoft.com/azure/app-service-web/app-service-web-overview) bereit, die unter dem Tarif „Free“ ausgeführt wird. \n\nVorbereitungen Fork https://github.com/Azure-Samples/python-docs-hello-world\n\nAuthentifizieren:\n```azurecli\naz login\n```\nErstellen Sie eine Ressourcengruppe:\n```azurecli\naz group create -l eastus -n sampleWebResourceGroup\n```\n\nErstellen eines App Service-Tarifs vom Typ „Free“:\n```azurecli\naz appservice plan create -g sampleWebResourceGroup -n sampleFreePlan  --sku Free\n```\n\n```python\nfrom azure.mgmt.web import WebSiteManagementClient\nfrom azure.mgmt.web.models import Site, SiteSourceControl, SiteConfig\nfrom azure.common.client_factory import get_client_from_cli_profile\n\nRESOURCE_GROUP_NAME = 'sampleWebResourceGroup'\nSERVICE_PLAN_NAME = 'sampleFreePlanName'\nWEB_APP_NAME = 'sampleflaskapp123'\nREPO_URL = 'GitHub_Repository_URL'\n\n#log in\nweb_client = get_client_from_cli_profile(WebSiteManagementClient)\n\n# get service plan id\nservice_plan = web_client.app_service_plans.get(RESOURCE_GROUP_NAME, SERVICE_PLAN_NAME)\n\n# create a web app\nsiteConfiguration = SiteConfig(\n    python_version='3.4',\n)\nsite_async_operation = web_client.web_apps.create_or_update(\n    RESOURCE_GROUP_NAME,\n    WEB_APP_NAME,\n    Site(\n        location='eastus',\n        server_farm_id=service_plan.id,\n        site_config=siteConfiguration\n    ),\n)\n\nsite = site_async_operation.result()\nprint('created webapp: ' + site.default_host_name)\n\n# continuous deployment with GitHub\nsource_control_async_operation = web_client.web_apps.create_or_update_source_control(\n    RESOURCE_GROUP_NAME,\n    WEB_APP_NAME,\n    SiteSourceControl(\n        location='GitHub',\n        repo_url= REPO_URL,\n        branch='master'\n    )\n)\n\nsource_control = source_control_async_operation.result()\nprint(\"added source control to: \" + source_control.name + \"azurewebsites.net\")\n```\n\nÖffnen Sie die Anwendung über die Befehlszeilenschnittstelle in einem Browser:\n```azurecli\naz appservice web browse --resource-group sampleWebResourceGroup --name YOUR_APP_NAME\n```\n\nEntfernen Sie die Web-App und den Plan aus Ihrem Abonnement, nachdem Sie die Bereitstellung überprüft haben. \n```azurecli\naz group delete --name sampleWebResourceGroup\n```\n"
- title: Herstellen einer Verbindung mit einer SQL-Datenbank-Instanz
  durationInMinutes: 5
  content: "Mit diesem Code wird eine neue SQL-Datenbank-Instanz mit einer Firewallregel erstellt, die Remotezugriff zulässt, und anschließend über den ODBC-Treiber von Microsoft eine Verbindung mit ihr hergestellt. pyodbc verwendet den Microsoft ODBC-Treiber unter Linux zum Herstellen von Verbindungen mit SQL-Datenbank-Instanzen. \n\nAuthentifizieren:\n```azurecli\naz login\n```\nErstellen Sie eine Ressourcengruppe:\n```azurecli\naz group create -l eastus -n azure-sample-group\n```\n\nErstellen einer SQL Server-Instanz:\n```azurecli\naz sql server create --admin-password HusH_Sec4et --admin-user mysecretname -l eastus -n samplesqlserver123 -g azure-sample-group\n```\n\nHinzufügen einer Firewallregel:\n```azurecli\naz sql server firewall-rule create --end-ip-address 167.220.0.235 --name firewall_rule_name_123.123.123.123 --resource-group azure-sample-group --server samplesqlserver123 --start-ip-address 123.123.123.123\n```\n\nErstellen einer SQL-Datenbank-Instanz:\n```azurecli\naz sql db create --name sample-db --resource-group azure-sample-group --server samplesqlserver123\n```\n\n```python\nfrom azure.mgmt.sql import SqlManagementClient\nfrom azure.common.client_factory import get_client_from_cli_profile\nimport pyodbc\n\nLOCATION = 'eastus'\nGROUP_NAME = 'azure-sample-group'\nSERVER_NAME = 'samplesqlserver123'\nDATABASE_NAME = 'sample-db'\nUSER_NAME ='mysecretname'\nPASSWORD='HusH_Sec4et'\n\n# authenticate\nsql_client = get_client_from_cli_profile(SqlManagementClient)\n\n\ndef run_example():\n# Get SQL Database\nprint('Get SQL Database')\ndatabase = sql_client.databases.get(\n    GROUP_NAME,\n    SERVER_NAME,\n    DATABASE_NAME\n)\nprint(database)\nprint(\"\\n\\n\")\n\n\ndef create_and_insert():\nserver = SERVER_NAME+'.database.windows.net'\ndatabase = DATABASE_NAME\nusername = USER_NAME\npassword = PASSWORD\ndriver = '{ODBC Driver 13 for SQL Server}'\ncnxn = pyodbc.connect(\n    'DRIVER=' + driver + ';PORT=1433;SERVER=' + server + ';PORT=1443;DATABASE=' + database + ';UID=' + username + ';PWD=' + password)\ncursor = cnxn.cursor()\ntsql = \"CREATE TABLE CLOUD (name varchar(255), code int);\"\ntsqlInsert = \"INSERT INTO CLOUD (name, code) VALUES ('Azure', 1); \"\nselectValues = \"SELECT * FROM CLOUD\"\nwith cursor.execute(tsql):\n    print('Successfully created table!')\nwith cursor.execute(tsqlInsert):\n    print('Successfully inserted data into table')\ncursor.execute(selectValues)\nrow = cursor.fetchone()\nwhile row:\n    print(str(row[0]) + \" \" + str(row[1]))\n    row = cursor.fetchone()\ncnxn.commit()\n\nif __name__ == \"__main__\":\nrun_example()\ncreate_and_insert()\n```\n\nNachdem Sie sich vergewissert haben, dass der Code erfolgreich ausgeführt wurde, löschen Sie die SQL-Datenbank-Instanz und ihre Ressourcen mit der CLI.\n\n```azurecli\naz group delete --name azure-sample-group\n```\n"
- title: Schreiben eines Blobs in ein neues Speicherkonto
  durationInMinutes: 5
  content: "Authentifizieren:\n```azurecli\naz login\n```\nErstellen Sie eine Ressourcengruppe:\n```azurecli\naz group create -l eastus -n sampleStorageResourceGroup\n```\n\nErstellen eines Speicherkontos:\n```azurecli\naz storage account create -n samplestorageaccountname -g sampleStorageResourceGroup -l eastus --sku Standard_RAGRS\n```\n\nDieser Code erstellt ein [Azure-Speicherkonto](https://docs.microsoft.com/azure/storage/common/storage-introduction) und anschließend unter Verwendung von Azure Storage-Bibliotheken für Python eine neue HTML-Datei in der Cloud. \n```python\nfrom azure.storage import CloudStorageAccount\nfrom azure.storage.blob import PublicAccess\nfrom azure.storage.blob.models import ContentSettings\nfrom azure.common.client_factory import get_client_from_cli_profile\nfrom azure.mgmt.storage import StorageManagementClient\n\nRESOURCE_GROUP = 'sampleStorageResourceGroup'\nSTORAGE_ACCOUNT_NAME = 'samplestorageaccountname'\nCONTAINER_NAME = 'samplecontainername'\n\n# log in\nstorage_client = get_client_from_cli_profile(StorageManagementClient)\n\n# create a public storage container to hold the file\nstorage_keys = storage_client.storage_accounts.list_keys(RESOURCE_GROUP, STORAGE_ACCOUNT_NAME)\nstorage_keys = {v.key_name: v.value for v in storage_keys.keys}\n\nstorage_client = CloudStorageAccount(STORAGE_ACCOUNT_NAME, storage_keys['key1'])\nblob_service = storage_client.create_block_blob_service()\n\nblob_service.create_container(CONTAINER_NAME, public_access=PublicAccess.Container)\n\nblob_service.create_blob_from_bytes(\n    CONTAINER_NAME,\n    'helloworld.html',\n    b'<center><h1>Hello World!</h1></center>',\n    content_settings=ContentSettings('text/html')\n)\n\nprint(blob_service.make_blob_url(CONTAINER_NAME, 'helloworld.html'))\n```\nNavigieren Sie zur ausgegebenen URL, um den erfolgreichen Upload der Inhalte zu überprüfen. \n\nBereinigen Sie das Speicherkonto über die Befehlszeilenschnittstelle:\n```azurecli\naz group delete --name sampleStorageResourceGroup\n```\n"
- title: Nächste Schritte
  content: >-
    Sie haben „Erste Schritte mit Azure-Bibliotheken für Python“ abgeschlossen.


    - Weitere Informationen zur Ressourcenverwaltung und Aufgabenautomatisierung mit den Azure-Verwaltungsbibliotheken für Python finden Sie in unserem Beispielcode für [virtuelle Computer](/samples/browse/?languages=python&products=azure-virtual-machines), [Web-Apps](/samples/browse/?languages=python&products=azure-functions%2Cazure-app-service%2Cazure-logic-apps) und [SQL-Datenbank](/samples/browse/?languages=python&products=azure-cosmos-db%2Cazure-sql-database).


    - Für alle Pakete steht eine [Referenz](/python/api/overview/azure/?view=azure-python) zur Verfügung.
